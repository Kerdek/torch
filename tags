!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
BLEND	blend.h	/^#define BLEND$/;"	d
ENTITY	entity.h	/^#define ENTITY$/;"	d
FLOOR	floor.h	/^#define FLOOR$/;"	d
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f	typeref:typename:void
LIST_H	list.h	/^#define LIST_H$/;"	d
LIST_HEAD	list.h	/^#define LIST_HEAD(/;"	d
LIST_HEAD_INIT	list.h	/^#define LIST_HEAD_INIT(/;"	d
MAP_COLS	floor.h	/^#define MAP_COLS /;"	d
MAP_COLS	torch.h	/^#define MAP_COLS /;"	d
MAP_LINES	floor.h	/^#define MAP_LINES /;"	d
MAP_LINES	torch.h	/^#define MAP_LINES /;"	d
TORCH	torch.h	/^#define TORCH$/;"	d
VIEW_COLS	torch.h	/^#define VIEW_COLS /;"	d
VIEW_LINES	torch.h	/^#define VIEW_LINES /;"	d
__draw_entities	torch.c	/^void __draw_entities(TickitRenderBuffer *rb, TickitPen *pen, entity_list *entities)$/;"	f	typeref:typename:void
__draw_map	torch.c	/^void __draw_map(TickitRenderBuffer *rb, TickitPen *pen, struct tile (*map)[MAP_LINES][MAP_COLS])$/;"	f	typeref:typename:void
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f	typeref:typename:void
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f	typeref:typename:void
__list_del_entry	list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f	typeref:typename:void
all	makefile	/^all: torch$/;"	t
b	blend.h	/^	int r, g, b;$/;"	m	struct:blend_data	typeref:typename:int
b	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:entity	typeref:typename:uint8_t
b	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:tile	typeref:typename:uint8_t
blend_buffer	blend.c	/^struct blend_data blend_buffer[MAP_LENGTH][MAP_WIDTH];$/;"	v	typeref:struct:blend_data[][]
blend_buffer_add	blend.c	/^void blend_buffer_add(int y, int x, int r, int g, int b, float light)$/;"	f	typeref:typename:void
blend_buffer_at	blend.c	/^struct blend_data blend_buffer_at(int y, int x)$/;"	f	typeref:struct:blend_data
blend_buffer_clear	blend.c	/^void blend_buffer_clear(void)$/;"	f	typeref:typename:void
blend_buffer_flush_light	blend.c	/^void blend_buffer_flush_light(void)$/;"	f	typeref:typename:void
blend_data	blend.h	/^struct blend_data {$/;"	s
blend_sprite	blend.c	/^TickitPenRGB8 blend_sprite(struct blend_data blend, struct sprite sprite)$/;"	f	typeref:typename:TickitPenRGB8
container_of	list.h	/^ #define container_of(/;"	d
cur_floor	torch.c	/^struct floor *cur_floor = &demo_floor;$/;"	v	typeref:struct:floor *
debug	makefile	/^debug: torch.c torch.h list.h$/;"	t
def_entity_fn	torch.c	/^def_entity_fn(demo_torch_destroy)$/;"	f
def_entity_fn	torch.c	/^def_entity_fn(demo_torch_update)$/;"	f
def_entity_fn	torch.h	/^#define def_entity_fn(/;"	d
def_entity_update_fn	entity.h	/^#define def_entity_update_fn(/;"	d
def_main_win_key_fn	torch.c	/^#define def_main_win_key_fn(/;"	d	file:
def_main_win_key_fn	torch.c	/^def_main_win_key_fn(nothing)$/;"	f
demo_add_entities	torch.c	/^static void demo_add_entities(void)$/;"	f	typeref:typename:void	file:
demo_floor	torch.c	/^struct floor demo_floor;$/;"	v	typeref:struct:floor
demo_floor_load_map	torch.c	/^static void demo_floor_load_map(const char *filename)$/;"	f	typeref:typename:void	file:
destroy	torch.h	/^	entity_fn *destroy;$/;"	m	struct:entity	typeref:typename:entity_fn *
draw_entities	torch.c	/^void draw_entities(TickitRenderBuffer *rb, TickitPen *pen)$/;"	f	typeref:typename:void
draw_map	torch.c	/^void draw_map(TickitRenderBuffer *rb, TickitPen *pen)$/;"	f	typeref:typename:void
duration	entity.h	/^	int duration;$/;"	m	struct:light_source	typeref:typename:int
e	entity.h	/^	struct entity e;$/;"	m	struct:light_source	typeref:struct:entity
emit	entity.h	/^	float emit;$/;"	m	struct:light_source	typeref:typename:float
entities	floor.h	/^	entity_list entities;$/;"	m	struct:floor	typeref:typename:entity_list
entities	torch.h	/^	entity_list entities;$/;"	m	struct:floor	typeref:typename:entity_list
entity	entity.h	/^struct entity {$/;"	s
entity	torch.h	/^struct entity {$/;"	s
entity_fn	torch.h	/^typedef def_entity_fn(entity_fn);$/;"	t	typeref:typename:def_entity_fn ()
entity_list	floor.h	/^typedef struct list_head entity_list;$/;"	t	typeref:struct:list_head
entity_list	torch.h	/^typedef struct list_head entity_list;$/;"	t	typeref:struct:list_head
entity_update_fn	entity.h	/^typedef def_entity_update_fn(entity_update_fn);$/;"	t	typeref:typename:def_entity_update_fn ()
floor	floor.h	/^struct floor {$/;"	s
floor	torch.h	/^struct floor {$/;"	s
floor_map	floor.h	/^struct floor_map {$/;"	s
g	blend.h	/^	int r, g, b;$/;"	m	struct:blend_data	typeref:typename:int
g	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:entity	typeref:typename:uint8_t
g	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:tile	typeref:typename:uint8_t
light	blend.h	/^	float light;$/;"	m	struct:blend_data	typeref:typename:float
light	floor.h	/^	float light;$/;"	m	struct:tile	typeref:typename:float
light	torch.h	/^	int light;$/;"	m	struct:tile	typeref:typename:int
light_source	entity.h	/^struct light_source {$/;"	s
list	entity.h	/^	struct list_head list;$/;"	m	struct:entity	typeref:struct:list_head
list	torch.h	/^	struct list_head list;$/;"	m	struct:entity	typeref:struct:list_head
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f	typeref:typename:void
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	typeref:typename:void
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f	typeref:typename:void
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	typeref:typename:void
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f	typeref:typename:int
list_entry	list.h	/^#define list_entry(/;"	d
list_first_entry	list.h	/^#define list_first_entry(/;"	d
list_for_each	list.h	/^#define list_for_each(/;"	d
list_for_each_entry	list.h	/^#define list_for_each_entry(/;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_next_entry	list.h	/^#define list_next_entry(/;"	d
list_prev_entry	list.h	/^#define list_prev_entry(/;"	d
main	torch.c	/^int main(void)$/;"	f	typeref:typename:int
main_win_draw	torch.c	/^TickitWindowEventFn main_win_draw;$/;"	v	typeref:typename:TickitWindowEventFn
main_win_draw	torch.c	/^int main_win_draw(TickitWindow *win, TickitEventFlags flags, void *info, void *user)$/;"	f	typeref:typename:int
main_win_key_fn	torch.c	/^typedef def_main_win_key_fn(main_win_key_fn);$/;"	t	typeref:typename:def_main_win_key_fn ()	file:
main_win_keymap	torch.c	/^main_win_key_fn *main_win_keymap[] = {$/;"	v	typeref:typename:main_win_key_fn * []
main_win_on_key	torch.c	/^TickitWindowEventFn main_win_on_key;$/;"	v	typeref:typename:TickitWindowEventFn
main_win_on_key	torch.c	/^int main_win_on_key(TickitWindow *win, TickitEventFlags flags, void *info, void *user)$/;"	f	typeref:typename:int
map	floor.h	/^	struct floor_map map;$/;"	m	struct:floor	typeref:struct:floor_map
min	blend.c	/^#define min(/;"	d	file:
name	entity.h	/^	const char *name;$/;"	m	struct:entity	typeref:typename:const char *
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head *
order	entity.h	/^	int order;$/;"	m	struct:entity	typeref:typename:int
player	torch.c	/^struct entity player = {$/;"	v	typeref:struct:entity
point	torch.h	/^struct point {$/;"	s
pos	entity.h	/^	struct point pos;$/;"	m	struct:entity	typeref:struct:point
posx	torch.h	/^	int posy, posx;$/;"	m	struct:entity	typeref:typename:int
posy	torch.h	/^	int posy, posx;$/;"	m	struct:entity	typeref:typename:int
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head **
r	blend.h	/^	int r, g, b;$/;"	m	struct:blend_data	typeref:typename:int
r	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:entity	typeref:typename:uint8_t
r	torch.h	/^	uint8_t r, g, b;$/;"	m	struct:tile	typeref:typename:uint8_t
speed	entity.h	/^	int speed;$/;"	m	struct:entity	typeref:typename:int
sprite	entity.h	/^	struct sprite sprite;$/;"	m	struct:entity	typeref:struct:sprite
sprite	floor.h	/^	struct sprite sprite;$/;"	m	struct:tile	typeref:struct:sprite
tile	floor.h	/^struct tile {$/;"	s
tile	torch.h	/^struct tile {$/;"	s
tile_map	torch.h	/^ struct tile tile_map[MAP_LINES][MAP_COLS];$/;"	m	struct:floor	typeref:struct:tile[][]
tile_map_at	torch.c	/^struct tile tile_map_at(struct tile (*map)[MAP_LINES][MAP_COLS], int y, int x)$/;"	f	typeref:struct:tile
tiles	floor.h	/^	struct tile tiles[MAP_LINES][MAP_COLS];$/;"	m	struct:floor_map	typeref:struct:tile[][]
token	torch.h	/^	char token;$/;"	m	struct:entity	typeref:typename:char
token	torch.h	/^	char token;$/;"	m	struct:tile	typeref:typename:char
torch	makefile	/^torch: torch.c torch.h list.h$/;"	t
uint	torch.h	/^typedef unsigned int uint;$/;"	t	typeref:typename:unsigned int
update	entity.h	/^	entity_update_fn *update;$/;"	m	struct:entity	typeref:typename:entity_update_fn *
update	torch.h	/^	entity_fn *update;$/;"	m	struct:entity	typeref:typename:entity_fn *
update_entities	torch.c	/^void update_entities(entity_list *entities)$/;"	f	typeref:typename:void
x	torch.h	/^	int y, x;$/;"	m	struct:point	typeref:typename:int
y	torch.h	/^	int y, x;$/;"	m	struct:point	typeref:typename:int
